{"version":3,"sources":["components/Route/RouteLoading.tsx","components/Route/RouteWithSubRoutes.tsx","routerConfig.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["RouteLoading","RouteRender","route","path","title","children","to","exact","render","props","document","component","routes","RouteWithSubRoutes","map","i","key","Home","React","lazy","App","fallback","Boolean","window","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yMAQeA,EANM,WACjB,OACI,4CCYFC,EAAc,SAACC,GAAqB,IAC/BC,EAAuCD,EAAvCC,KAAMC,EAAiCF,EAAjCE,MADwB,EACSF,EAA1BG,gBADiB,MACN,GADM,IACSH,EAAXI,UADE,MACG,GADH,EAErC,MAAa,MAATH,EAEI,kBAAC,IAAD,CAAOA,KAAK,IAAII,OAAK,EAACC,OAAQ,kBAC1B,kBAAC,IAAD,CAAUF,GAAIA,OAKlB,kBAAC,IAAD,CAAOH,KAAMA,EAAMK,OAAQ,SAAAC,GAEvB,OADAC,SAASN,MAAQA,GAAgB,YAC1B,kBAACF,EAAMS,UAAP,iBAAqBF,EAArB,CAA4BG,OAAQP,SAiB5CQ,EAXY,SAACJ,GAAkB,IACnCG,EAAUH,EAAVG,OACP,OACI,oCAEQA,EAAOE,KAAI,SAACZ,EAAOa,GAAR,OAAc,kBAAC,EAAD,eAAaC,IAAKD,GAAOb,SCrC5De,EAAOC,IAAMC,MAAK,kBAAM,kCAwEfP,EAtDa,CACxB,CACIT,KAAM,IACNG,GAAI,QACJF,MAAO,eACPO,UAAWM,GAEf,CACId,KAAM,QACNC,MAAO,eACPO,UAAWM,GAEf,CACId,KAAM,QACNC,MAAO,eACPO,UAhCKO,IAAMC,MAAK,kBAAM,kCAkC1B,CACIhB,KAAM,YACNC,MAAO,gCACPO,UApCSO,IAAMC,MAAK,kBAAM,0DAsC9B,CACIhB,KAAM,WACNC,MAAO,mEACPO,UAxCYO,IAAMC,MAAK,kBAAM,wDA0CjC,CACIhB,KAAM,YACNC,MAAO,sEACPO,UA5CYO,IAAMC,MAAK,kBAAM,wDA8CjC,CACIhB,KAAM,SACNC,MAAO,iCACPO,UAhDMO,IAAMC,MAAK,kBAAM,wDAkD3B,CACIhB,KAAM,aACNC,MAAO,qCACPO,UApDUO,IAAMC,MAAK,kBAAM,yDAsD/B,CACIhB,KAAM,4BACNC,MAAO,2BACPO,UAxDyBO,IAAMC,MAAK,kBAAM,kCA0D9C,CACIhB,KAAM,yBACNC,MAAO,wBACPO,UA5DsBO,IAAMC,MAAK,kBAAM,mCCQhCC,EAZO,WAClB,OACI,kBAAC,IAAD,KACI,kBAAC,WAAD,CAAUC,SAAU,kBAAC,EAAD,OAChB,kBAAC,IAAD,KACI,kBAAC,EAAD,CAAoBT,OAAQA,QCC5BU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASnB,OAAO,kBAAC,EAAD,MAASE,SAASkB,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b72f1e96.chunk.js","sourcesContent":["import React from \"react\";\n\nconst RouteLoading = () => {\n    return (\n        <div>loading!!!</div>\n    )\n};\n\nexport default RouteLoading;\n","import React, {LazyExoticComponent} from \"react\";\nimport {Route, Redirect} from \"react-router-dom\";\n\n\ninterface RouteType {\n    path: string;\n    title: string;\n    component: LazyExoticComponent<any>;\n    children?: RouteType[];\n    to?: string;\n}\n\ninterface Iprops {\n    routes: RouteType[]\n}\n\nconst RouteRender = (route:RouteType) => {\n    const {path, title, children = [], to = ''} = route;\n    if (path === \"/\") {\n        return (\n            <Route path=\"/\" exact render={() => (\n                <Redirect to={to}/>\n            )}/>\n        )\n    } else {\n        return (\n            <Route path={path} render={props => {\n                document.title = title ? title : 'yaeSakura';\n                return <route.component {...props} routes={children}/>\n            }}/>\n        )\n    }\n};\n\nconst RouteWithSubRoutes = (props:Iprops) => {\n    const {routes} = props;\n    return (\n        <>\n            {\n                routes.map((route, i) => <RouteRender key={i} {...route}/>)\n            }\n        </>\n    )\n};\n\nexport default RouteWithSubRoutes;","import React, {LazyExoticComponent} from \"react\";\n\nconst Home = React.lazy(() => import('./views/Home'));\nconst Test = React.lazy(() => import('./views/Test'));\nconst JsonView = React.lazy(() => import('./views/JsonView'));\nconst UrlStrToObj = React.lazy(() => import('./views/UrlStrToObj'));\nconst ObjectToStr = React.lazy(() => import('./views/ObjectToStr'));\nconst Range = React.lazy(() => import('./views/Range'));\nconst Selection = React.lazy(() => import('./views/Selection'));\nconst GetDerivedStateFromProps = React.lazy(() => import('./views/GetDerivedStateFromProps'));\nconst ShouldComponentUpdate = React.lazy(() => import('./views/ShouldComponentUpdate'));\n\ninterface RouteType {\n    path: string;\n    title: string;\n    component: LazyExoticComponent<any>;\n    children?: RouteType[];\n    to?: string;\n}\n\nconst routes: RouteType[] = [\n    {\n        path: '/',\n        to: '/home',\n        title: '主页',\n        component: Home,\n    },\n    {\n        path: '/home',\n        title: '主页',\n        component: Home,\n    },\n    {\n        path: '/test',\n        title: '测试',\n        component: Test,\n    },\n    {\n        path: '/jsonview',\n        title: 'json 解析工具',\n        component: JsonView\n    },\n    {\n        path: '/strtobj',\n        title: 'url 查询字符串解析成对象',\n        component: UrlStrToObj\n    },\n    {\n        path: '/objtostr',\n        title: 'obejct 对象转换成查询字符串',\n        component: ObjectToStr\n    },\n    {\n        path: '/range',\n        title: 'Range 对象示例',\n        component: Range\n    },\n    {\n        path: '/selection',\n        title: 'Selection 对象示例',\n        component: Selection\n    },\n    {\n        path: '/getDerivedStateFromProps',\n        title: 'GetDerivedStateFromProps',\n        component: GetDerivedStateFromProps\n    },\n    {\n        path: '/shouldComponentUpdate',\n        title: 'ShouldComponentUpdate',\n        component: ShouldComponentUpdate\n    },\n];\n\nexport default routes;","import React, {Suspense} from 'react';\nimport { HashRouter,Switch } from \"react-router-dom\";\nimport RouteLoading from './components/Route/RouteLoading';\nimport RouteWithSubRoutes from './components/Route/RouteWithSubRoutes';\nimport routes from './routerConfig';\n\nconst App: React.FC = () => {\n    return (\n        <HashRouter>\n            <Suspense fallback={<RouteLoading />}>\n                <Switch>\n                    <RouteWithSubRoutes routes={routes}/>\n                </Switch>\n            </Suspense>\n        </HashRouter>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}